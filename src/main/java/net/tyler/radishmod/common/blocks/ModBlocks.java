package net.tyler.radishmod.common.blocks;

import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.Material;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;
import net.tyler.radishmod.RadishMod;
import net.tyler.radishmod.common.blocks.custom.JumpyBlock;
import net.tyler.radishmod.common.blocks.custom.RadishCropBlock;
import net.tyler.radishmod.common.blocks.custom.RadishLampBlock;
import net.tyler.radishmod.common.items.ModItems;

import java.util.function.Supplier;

public class ModBlocks {
    public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, RadishMod.MOD_ID);

    // BLOCKS THAT SHOULD HAVE AUTOGENERATED ITEM ALONG WITH IT
    public static final RegistryObject<Block> COMPACT_RADISH = registerBlock("compact_radish",
            () -> new Block(BlockBehaviour.Properties.of(Material.LEAVES).strength(2f).sound(SoundType.AZALEA_LEAVES)));
    public static final RegistryObject<Block> JUMPY_BLOCK = registerBlock("jumpy_block",
            () -> new JumpyBlock(BlockBehaviour.Properties.of(Material.STONE).strength(2f)));
    public static final RegistryObject<Block> RADISH_LAMP = registerBlock("radish_lamp",
            () -> new RadishLampBlock(BlockBehaviour.Properties.of(Material.STONE).strength(2f).lightLevel(state -> state.getValue(RadishLampBlock.LIT) ? 15 : 0)));

    // BLOCKS THAT SHOULD NOT HAVE AUTOGENERATED ITEM ALONG WITH IT
    public static final RegistryObject<Block> RADISH_CROP = BLOCKS.register("radish_crop",
            () -> new RadishCropBlock(BlockBehaviour.Properties.copy(Blocks.WHEAT)));


    // registers a block and calls registerBlockItem to create a new item for the block
    private static <T extends Block> RegistryObject<T> registerBlock(String name, Supplier<T> block) {
        RegistryObject<T> toReturn = BLOCKS.register(name, block);
        registerBlockItem(name, toReturn);
        return toReturn;
    }

    // registers a new item to represent the new block
    private static <T extends Block> RegistryObject<Item> registerBlockItem(String name, RegistryObject<T> block) {
        return ModItems.ITEMS.register(name, () -> new BlockItem(block.get(), new Item.Properties()));
    }

    // registers the block register into the event bus?
    public static void register(IEventBus eventBus) {
        BLOCKS.register(eventBus);
    }
}
